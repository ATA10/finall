import React, { useState, useEffect } from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardMedia from '@mui/material/CardMedia';
import Grid from '@mui/material/Grid';
import { Modal, Typography, TextField, Button, Box, IconButton } from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import UploadIcon from '@mui/icons-material/CloudUpload';
import Ekle from './EkleUrun';


// Ana bileşenimiz, ürün listesini görüntüleyen ve düzenlemeyi sağlayan bir form
export default function ProductctForm({ProductList, setProductList, AddProduct}) {
  
  // State değişkenleri: Seçili ürün, düzenlenmiş başlık ve açıklama
  const [selectedProduct, setselectedProduct] = useState(null);
  const [editedTitleProduct, seteditedTitleProduct] = useState('');
  const [editedDescriptionProduct, seteditedDescriptionProduct] = useState('');

  // Fonksiyon: Kart tıklandığında çalışır, seçili ürünü ve bilgilerini set eder
  const handleCardClick = (Product) => {
    setselectedProduct(Product);
    seteditedTitleProduct(Product.title);
    seteditedDescriptionProduct(Product.description);
  };

  // Fonksiyon: Modal'ı kapatır ve state'leri sıfırlar
  const handleCloseModal = () => {
    setselectedProduct(null);
    seteditedTitleProduct('');
    seteditedDescriptionProduct('');
  };

  // Fonksiyon: Güncelle butonuna tıklandığında çalışır, ürünü günceller ve modal'ı kapatır
  const handleUpdate = async () => {
    // Güncellenen veriyi oluştur
    const updatedProduct = {
      ...selectedProduct,
      title: editedTitleProduct,
      description: editedDescriptionProduct,
    };

    // Güncellenen ürünü yerel state içinde bul
    const updatedProductList = ProductList.map((Product) =>
      Product === selectedProduct ? updatedProduct : Product
    );

    // TODO: Yerel state'i güncelle
    setProductList(updatedProductList);

    try {
      // API'ye POST isteği gönderme
      const response = await fetch('/api/ServerProduct', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updatedProductList),
      });

      if (response.ok) {
        console.log('Ürün başarıyla güncellendi');
      } else {
        console.error('Ürün güncellenirken bir hata oluştu');
      }
    } catch (error) {
      console.error('API isteği sırasında bir hata oluştu', error);
    }

    // Modal'ı kapat
    handleCloseModal();
  };

  // Fonksiyon: Sil butonuna tıklandığında çalışır, seçili ürünü siler ve modal'ı kapatır
  const handleDelete = async () => {
    // Silinen ürünü yerel state içinden filtrele
    const updatedProductList = ProductList.filter((Product) => Product !== selectedProduct);

    // TODO: Yerel state'i güncelle
    setProductList(updatedProductList);
    try {
      // API'ye POST isteği gönderme
      const response = await fetch('/api/ServerProduct', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updatedProductList),
      });

      if (response.ok) {
        console.log('Ürün başarıyla güncellendi');
      } else {
        console.error('Ürün güncellenirken bir hata oluştu');
      }
    } catch (error) {
      console.error('API isteği sırasında bir hata oluştu', error);
    }

    // Modal'ı kapat
    handleCloseModal();
  };

  // Ana bileşenin render fonksiyonu
  return (
    <>
      <Box sx={{ height: '5vh' }} />
      <Typography variant="h3" gutterBottom style={{ textAlign: 'center' }}>
        ÜRÜNLERİMİZ
      </Typography>
      <Grid
        container
        spacing={{ xs: 1, md: 1 }}
        columns={{ xs: 4, sm: 4, md: 24 }}
        justifyContent="center"
        alignItems="center"
      >
        {/* Ürünleri kartlar halinde görüntüle */}
        {ProductList.map((Product, index) => (
          <Grid item xs={2} sm={4} md={4} key={index}>
            <Card sx={{ maxWidth: 300, margin: 'auto', height: '100%' }} onClick={() => handleCardClick(Product)}>
              <CardMedia
                component="img"
                height="240"
                image={Product.img}
                alt={Product.title}
              />
              <CardContent>
                <Typography gutterBottom variant="h5" component="div">
                  {Product.title}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        ))}
        {/* Yeni ürün eklemek için "Ekle" bileşenini göster */}
        <Ekle AddProduct={AddProduct} ProductList={ProductList} />
      </Grid>
      <Modal
        open={Boolean(selectedProduct)}
        onClose={handleCloseModal}
        aria-labelledby="Product-modal"
        aria-describedby="Product-modal-description"
        style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        {/* Seçili ürünü düzenleme modal'ı */}
        <div style={{ overflow: 'auto', backgroundColor: 'rgba(255, 255, 255)', padding: '20px' }}>
          <Typography variant="h5" gutterBottom style={{ opacity: '1.0' }}>
            {selectedProduct?.title}   # {selectedProduct?.id}
          </Typography>
          <img src={selectedProduct?.img} alt={selectedProduct?.title} style={{ maxWidth: '100%', maxHeight: '100%' }} />
          {/* Başlık düzenleme alanı */}
          <TextField
            label="Başlık"
            variant="outlined"
            fullWidth
            value={editedTitleProduct}
            onChange={(e) => seteditedTitleProduct(e.target.value)}
          />
          {/* Açıklama düzenleme alanı */}
          <TextField
            label="Açıklama"
            variant="outlined"
            fullWidth
            multiline
            rows={4}
            value={editedDescriptionProduct}
            onChange={(e) => seteditedDescriptionProduct(e.target.value)}
          />
          {/* Güncelle - Sil butonları */}          
          <IconButton aria-label="upload" size="large" onClick={handleUpdate}>
            <UploadIcon fontSize="inherit" />
          </IconButton>
          <IconButton aria-label="delete" size="large" onClick={handleDelete}>
            <DeleteIcon fontSize="inherit" />
          </IconButton>
        </div>
      </Modal>   
    </>
  );
}
